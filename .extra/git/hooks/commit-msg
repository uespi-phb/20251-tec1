#!/bin/bash
#
# This script validates commit messages to comply to
# Git Conventional Commits
#
# It should be copied to .git/hooks directory of each
# git repository
#

# Minimal message length
minlen=10

message=$(cat "$1")
len=$(expr $minlen - 2)
regex="^(chore|docs|feat|fix|refactor|test): ([a-z].+{$len,}[^.])$"

normal="\033[0m"
red="\033[0;31m"
yellow="\033[1;33m"
green="\033[0;32m"
white="\033[1;97m"
grey="\033[0;37m"

if ! [[ "${message}" =~ ${regex} ]]; then
  echo
  echo -e "${red}####################################"
  echo -e "${red}#    Invalid Git Commit Message    #"
  echo -e "${red}####################################"
  echo
  echo -e "${white}commit message: ${red}${message}"
  echo -e "${white}correct format: ${green}<type>: <subject>"
  echo
  echo -e "${yellow}type:"
  echo -e "${yellow}  ${green}feat     ${grey}A new feature."
  echo -e "${yellow}  ${green}fix      ${grey}A bug fix."
  echo -e "${yellow}  ${green}docs     ${grey}Documentation only changes."
  echo -e "${yellow}  ${green}refactor ${grey}A code change that neither fixes a bug nor adds a feature."
  echo -e "${yellow}  ${green}test     ${grey}Adding missing tests or correcting existing ones."
  echo -e "${yellow}  ${green}chore    ${grey}Changes to the build process or auxiliary tools and"
  echo -e "${grey}           libraries such as documentation generation."
  echo
  echo -e "${yellow}subject:"
  echo -e "${grey}  Brief summary ${green}(min $minlen chars)${grey} of the change in present tense."
  echo -e "${grey}  Not capitalized. No period at the end."
  echo

  exit 1
fi

exit 0

